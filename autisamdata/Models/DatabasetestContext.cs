// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace autisamdata.Models
{
    public partial class DatabasetestContext : DbContext
    {
        public DatabasetestContext()
        {
        }

        public DatabasetestContext(DbContextOptions<DatabasetestContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Aboutus> Aboutus { get; set; }
        public virtual DbSet<Founder> Founder { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Partnership> Partnership { get; set; }
        public virtual DbSet<Secondblog> Secondblog { get; set; }
        public virtual DbSet<Teamdata> Teamdata { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Databasetest;Integrated Security=true");

            modelBuilder.Entity<Aboutus>(entity =>
            {
                entity.ToTable("aboutus");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Contex).HasColumnName("contex");

                entity.Property(e => e.Point)
                    .HasMaxLength(10)
                    .HasColumnName("point")
                    .IsFixedLength();

                entity.Property(e => e.Title).HasColumnName("title");
            });

            modelBuilder.Entity<Founder>(entity =>
            {
                entity.ToTable("founder");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FounderContext).HasColumnName("founder context");

                entity.Property(e => e.FounderName).HasColumnName("founder name");

                entity.Property(e => e.FounderPhoto)
                    .HasMaxLength(10)
                    .HasColumnName("founder photo")
                    .IsFixedLength();
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.ToTable("news");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Discription).HasColumnName("discription");

                entity.Property(e => e.Essay).HasColumnName("essay");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.Property(e => e.Title).HasColumnName("title");
            });

            modelBuilder.Entity<Partnership>(entity =>
            {
                entity.ToTable("partnership");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Contex).HasColumnName("contex");
            });

            modelBuilder.Entity<Secondblog>(entity =>
            {
                entity.ToTable("secondblog");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Contex).HasColumnName("contex");

                entity.Property(e => e.Discription).HasColumnName("discription");

                entity.Property(e => e.Title).HasColumnName("title");
            });

            modelBuilder.Entity<Teamdata>(entity =>
            {
                entity.ToTable("teamdata");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Biodata).HasColumnName("biodata");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}